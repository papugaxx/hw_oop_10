#include <iostream>
#include <string>

using namespace std;

//1

class Employer {
public:
    virtual void Print() const = 0;
    virtual ~Employer() {}
};

class President : public Employer {
public:
    void Print() const override {
        cout << "president" << endl;
    }
};

class Manager : public Employer {
public:
    void Print() const override {
        cout << "manager" << endl;
    }
};

class Worker : public Employer {
public:
    void Print() const override {
        cout << "worker" << endl;
    }
};

int main() {
    President president;
    Manager manager;
    Worker worker;

    president.Print();
    manager.Print();
    worker.Print();

    return 0;
}

//2

class Shape {
public:
    virtual double Area() const = 0;
    virtual ~Shape() {}
};

class Rectangle : public Shape {
private:
    double width, height;
public:
    Rectangle(double w, double h) : width(w), height(h) {}
    double Area() const override {
        return width * height;
    }
};

class Circle : public Shape {
private:
    double radius;
public:
    Circle(double r) : radius(r) {}
    double Area() const override {
        return 3.14 * radius * radius;
    }
};

class RightTriangle : public Shape {
private:
    double base, height;
public:
    RightTriangle(double b, double h) : base(b), height(h) {}
    double Area() const override {
        return 0.5 * base * height;
    }
};

class Trapezoid : public Shape {
private:
    double base1, base2, height;
public:
    Trapezoid(double b1, double b2, double h) : base1(b1), base2(b2), height(h) {}
    double Area() const override {
        return 0.5 * (base1 + base2) * height;
    }
};

int main() {
    const int size = 4;
    Shape* shapes[size];

    shapes[0] = new Rectangle(5.0, 3.0);
    shapes[1] = new Circle(4.0);
    shapes[2] = new RightTriangle(3.0, 4.0);
    shapes[3] = new Trapezoid(3.0, 5.0, 4.0);

    for (int i = 0; i < size; ++i) {
        cout << "area " << i + 1 << ": " << shapes[i]->Area() << endl;
    }

    for (int i = 0; i < size; ++i) {
        delete shapes[i];
    }

    return 0;
}

